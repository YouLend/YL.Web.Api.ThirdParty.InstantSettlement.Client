/* 
 * YouLend Third Party Instant Settlement API
 *
 * Through this API you can can create Instant Settlement transactions with YouLend
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.InstantSettlement.Client.Model
{
    /// <summary>
    /// Model for creating a instant settlement transaction
    /// </summary>
    [DataContract]
    public partial class CreateInstantSettlementTransactionModel :  IEquatable<CreateInstantSettlementTransactionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInstantSettlementTransactionModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateInstantSettlementTransactionModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateInstantSettlementTransactionModel" /> class.
        /// </summary>
        /// <param name="transactionReferences">Gets or sets a list of transaction references (required).</param>
        /// <param name="currencyISOCode">Gets or sets Currency ISO code string.</param>
        /// <param name="totalSettlementAmount">Gets or sets Total settlement amount.</param>
        /// <param name="transactionDate">Gets or sets transaction date  (needs to be within the settlement cycle length specified for each Instant Settlement).</param>
        public CreateInstantSettlementTransactionModel(List<string> transactionReferences = default(List<string>), string currencyISOCode = default(string), double totalSettlementAmount = default(double), DateTime transactionDate = default(DateTime))
        {
            // to ensure "transactionReferences" is required (not null)
            if (transactionReferences == null)
            {
                throw new InvalidDataException("transactionReferences is a required property for CreateInstantSettlementTransactionModel and cannot be null");
            }
            else
            {
                this.TransactionReferences = transactionReferences;
            }

            this.CurrencyISOCode = currencyISOCode;
            this.TotalSettlementAmount = totalSettlementAmount;
            this.TransactionDate = transactionDate;
        }
        
        /// <summary>
        /// Gets or sets a list of transaction references
        /// </summary>
        /// <value>Gets or sets a list of transaction references</value>
        [DataMember(Name="transactionReferences", EmitDefaultValue=false)]
        public List<string> TransactionReferences { get; set; }

        /// <summary>
        /// Gets or sets Currency ISO code string
        /// </summary>
        /// <value>Gets or sets Currency ISO code string</value>
        [DataMember(Name="currencyISOCode", EmitDefaultValue=false)]
        public string CurrencyISOCode { get; set; }

        /// <summary>
        /// Gets or sets Total settlement amount
        /// </summary>
        /// <value>Gets or sets Total settlement amount</value>
        [DataMember(Name="totalSettlementAmount", EmitDefaultValue=false)]
        public double TotalSettlementAmount { get; set; }

        /// <summary>
        /// Gets or sets transaction date  (needs to be within the settlement cycle length specified for each Instant Settlement)
        /// </summary>
        /// <value>Gets or sets transaction date  (needs to be within the settlement cycle length specified for each Instant Settlement)</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        public DateTime TransactionDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateInstantSettlementTransactionModel {\n");
            sb.Append("  TransactionReferences: ").Append(TransactionReferences).Append("\n");
            sb.Append("  CurrencyISOCode: ").Append(CurrencyISOCode).Append("\n");
            sb.Append("  TotalSettlementAmount: ").Append(TotalSettlementAmount).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateInstantSettlementTransactionModel);
        }

        /// <summary>
        /// Returns true if CreateInstantSettlementTransactionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateInstantSettlementTransactionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateInstantSettlementTransactionModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionReferences == input.TransactionReferences ||
                    this.TransactionReferences != null &&
                    input.TransactionReferences != null &&
                    this.TransactionReferences.SequenceEqual(input.TransactionReferences)
                ) && 
                (
                    this.CurrencyISOCode == input.CurrencyISOCode ||
                    (this.CurrencyISOCode != null &&
                    this.CurrencyISOCode.Equals(input.CurrencyISOCode))
                ) && 
                (
                    this.TotalSettlementAmount == input.TotalSettlementAmount ||
                    this.TotalSettlementAmount.Equals(input.TotalSettlementAmount)
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionReferences != null)
                    hashCode = hashCode * 59 + this.TransactionReferences.GetHashCode();
                if (this.CurrencyISOCode != null)
                    hashCode = hashCode * 59 + this.CurrencyISOCode.GetHashCode();
                hashCode = hashCode * 59 + this.TotalSettlementAmount.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TotalSettlementAmount (double) minimum
            if(this.TotalSettlementAmount < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalSettlementAmount, must be a value greater than or equal to 0.", new [] { "TotalSettlementAmount" });
            }

            yield break;
        }
    }

}
