/* 
 * YouLend Third Party Instant Settlement API
 *
 * Through this API you can can create Instant Settlement transactions with YouLend
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.OpenAPIDateConverter;

namespace YL.Web.Api.ThirdParty.InstantSettlement.Client.Model
{
    /// <summary>
    /// Model for viewing details of an Instant Settlement
    /// </summary>
    [DataContract]
    public partial class InstantSettlementView :  IEquatable<InstantSettlementView>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstantSettlementView" /> class.
        /// </summary>
        /// <param name="instantSettlementId">Gets or sets the Instant Settlement Id.</param>
        /// <param name="instantSettlementNumber">Gets or sets the Instant Settlement number.</param>
        /// <param name="lenderName">Gets or sets the lender name.</param>
        /// <param name="borrowerName">Gets or sets the borrower name.</param>
        /// <param name="currencyISOCode">Gets or sets the currency ISO code.</param>
        /// <param name="settlementCycleLengthDay">Gets or sets the settlement cycle length (number of days).</param>
        public InstantSettlementView(Guid instantSettlementId = default(Guid), int instantSettlementNumber = default(int), string lenderName = default(string), string borrowerName = default(string), string currencyISOCode = default(string), int settlementCycleLengthDay = default(int))
        {
            this.InstantSettlementId = instantSettlementId;
            this.InstantSettlementNumber = instantSettlementNumber;
            this.LenderName = lenderName;
            this.BorrowerName = borrowerName;
            this.CurrencyISOCode = currencyISOCode;
            this.SettlementCycleLengthDay = settlementCycleLengthDay;
        }
        
        /// <summary>
        /// Gets or sets the Instant Settlement Id
        /// </summary>
        /// <value>Gets or sets the Instant Settlement Id</value>
        [DataMember(Name="instantSettlementId", EmitDefaultValue=false)]
        public Guid InstantSettlementId { get; set; }

        /// <summary>
        /// Gets or sets the Instant Settlement number
        /// </summary>
        /// <value>Gets or sets the Instant Settlement number</value>
        [DataMember(Name="instantSettlementNumber", EmitDefaultValue=false)]
        public int InstantSettlementNumber { get; set; }

        /// <summary>
        /// Gets or sets the lender name
        /// </summary>
        /// <value>Gets or sets the lender name</value>
        [DataMember(Name="lenderName", EmitDefaultValue=false)]
        public string LenderName { get; set; }

        /// <summary>
        /// Gets or sets the borrower name
        /// </summary>
        /// <value>Gets or sets the borrower name</value>
        [DataMember(Name="borrowerName", EmitDefaultValue=false)]
        public string BorrowerName { get; set; }

        /// <summary>
        /// Gets or sets the currency ISO code
        /// </summary>
        /// <value>Gets or sets the currency ISO code</value>
        [DataMember(Name="currencyISOCode", EmitDefaultValue=false)]
        public string CurrencyISOCode { get; set; }

        /// <summary>
        /// Gets or sets the settlement cycle length (number of days)
        /// </summary>
        /// <value>Gets or sets the settlement cycle length (number of days)</value>
        [DataMember(Name="settlementCycleLengthDay", EmitDefaultValue=false)]
        public int SettlementCycleLengthDay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstantSettlementView {\n");
            sb.Append("  InstantSettlementId: ").Append(InstantSettlementId).Append("\n");
            sb.Append("  InstantSettlementNumber: ").Append(InstantSettlementNumber).Append("\n");
            sb.Append("  LenderName: ").Append(LenderName).Append("\n");
            sb.Append("  BorrowerName: ").Append(BorrowerName).Append("\n");
            sb.Append("  CurrencyISOCode: ").Append(CurrencyISOCode).Append("\n");
            sb.Append("  SettlementCycleLengthDay: ").Append(SettlementCycleLengthDay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstantSettlementView);
        }

        /// <summary>
        /// Returns true if InstantSettlementView instances are equal
        /// </summary>
        /// <param name="input">Instance of InstantSettlementView to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstantSettlementView input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InstantSettlementId == input.InstantSettlementId ||
                    (this.InstantSettlementId != null &&
                    this.InstantSettlementId.Equals(input.InstantSettlementId))
                ) && 
                (
                    this.InstantSettlementNumber == input.InstantSettlementNumber ||
                    this.InstantSettlementNumber.Equals(input.InstantSettlementNumber)
                ) && 
                (
                    this.LenderName == input.LenderName ||
                    (this.LenderName != null &&
                    this.LenderName.Equals(input.LenderName))
                ) && 
                (
                    this.BorrowerName == input.BorrowerName ||
                    (this.BorrowerName != null &&
                    this.BorrowerName.Equals(input.BorrowerName))
                ) && 
                (
                    this.CurrencyISOCode == input.CurrencyISOCode ||
                    (this.CurrencyISOCode != null &&
                    this.CurrencyISOCode.Equals(input.CurrencyISOCode))
                ) && 
                (
                    this.SettlementCycleLengthDay == input.SettlementCycleLengthDay ||
                    this.SettlementCycleLengthDay.Equals(input.SettlementCycleLengthDay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstantSettlementId != null)
                    hashCode = hashCode * 59 + this.InstantSettlementId.GetHashCode();
                hashCode = hashCode * 59 + this.InstantSettlementNumber.GetHashCode();
                if (this.LenderName != null)
                    hashCode = hashCode * 59 + this.LenderName.GetHashCode();
                if (this.BorrowerName != null)
                    hashCode = hashCode * 59 + this.BorrowerName.GetHashCode();
                if (this.CurrencyISOCode != null)
                    hashCode = hashCode * 59 + this.CurrencyISOCode.GetHashCode();
                hashCode = hashCode * 59 + this.SettlementCycleLengthDay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
