/* 
 * YouLend Third Party Instant Settlement API
 *
 * Through this API you can can create Instant Settlement transactions with YouLend
 *
 * The version of the OpenAPI document: v1.0
 * Contact: mark.ufland@youlend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using YL.Web.Api.ThirdParty.InstantSettlement.Client.Client;
using YL.Web.Api.ThirdParty.InstantSettlement.Client.Model;

namespace YL.Web.Api.ThirdParty.InstantSettlement.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstantSettlementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// An endpoint for getting your associated Instant Settlements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>List&lt;InstantSettlementView&gt;</returns>
        List<InstantSettlementView> ApiInstantSettlementGet (string apiVersion = default(string));

        /// <summary>
        /// An endpoint for getting your associated Instant Settlements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InstantSettlementView&gt;</returns>
        ApiResponse<List<InstantSettlementView>> ApiInstantSettlementGetWithHttpInfo (string apiVersion = default(string));
        /// <summary>
        /// Create instant settlement transactions for a specified instant settlement
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/InstantSettlement/30000001      [{          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 10000,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      },      {          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 500,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      }]
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">Instant settlement number (an integer)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="createInstantSettlementTransactionModel"> (optional)</param>
        /// <returns></returns>
        void ApiInstantSettlementInstantSettlementNumberPost (int instantSettlementNumber, string apiVersion = default(string), List<CreateInstantSettlementTransactionModel> createInstantSettlementTransactionModel = default(List<CreateInstantSettlementTransactionModel>));

        /// <summary>
        /// Create instant settlement transactions for a specified instant settlement
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/InstantSettlement/30000001      [{          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 10000,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      },      {          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 500,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      }]
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">Instant settlement number (an integer)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="createInstantSettlementTransactionModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiInstantSettlementInstantSettlementNumberPostWithHttpInfo (int instantSettlementNumber, string apiVersion = default(string), List<CreateInstantSettlementTransactionModel> createInstantSettlementTransactionModel = default(List<CreateInstantSettlementTransactionModel>));
        /// <summary>
        /// An endpoint for viewing the transactions for an Instant Settlement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">The number of the Instant Settlement product</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>List&lt;InstantSettlementTransactionModel&gt;</returns>
        List<InstantSettlementTransactionModel> ApiInstantSettlementInstantSettlementNumberTransactionsGet (int instantSettlementNumber, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for viewing the transactions for an Instant Settlement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">The number of the Instant Settlement product</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InstantSettlementTransactionModel&gt;</returns>
        ApiResponse<List<InstantSettlementTransactionModel>> ApiInstantSettlementInstantSettlementNumberTransactionsGetWithHttpInfo (int instantSettlementNumber, string apiVersion = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstantSettlementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// An endpoint for getting your associated Instant Settlements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of List&lt;InstantSettlementView&gt;</returns>
        System.Threading.Tasks.Task<List<InstantSettlementView>> ApiInstantSettlementGetAsync (string apiVersion = default(string));

        /// <summary>
        /// An endpoint for getting your associated Instant Settlements
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InstantSettlementView&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InstantSettlementView>>> ApiInstantSettlementGetAsyncWithHttpInfo (string apiVersion = default(string));
        /// <summary>
        /// Create instant settlement transactions for a specified instant settlement
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/InstantSettlement/30000001      [{          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 10000,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      },      {          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 500,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      }]
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">Instant settlement number (an integer)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="createInstantSettlementTransactionModel"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiInstantSettlementInstantSettlementNumberPostAsync (int instantSettlementNumber, string apiVersion = default(string), List<CreateInstantSettlementTransactionModel> createInstantSettlementTransactionModel = default(List<CreateInstantSettlementTransactionModel>));

        /// <summary>
        /// Create instant settlement transactions for a specified instant settlement
        /// </summary>
        /// <remarks>
        /// Sample request:                    POST /api/InstantSettlement/30000001      [{          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 10000,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      },      {          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 500,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      }]
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">Instant settlement number (an integer)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="createInstantSettlementTransactionModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiInstantSettlementInstantSettlementNumberPostAsyncWithHttpInfo (int instantSettlementNumber, string apiVersion = default(string), List<CreateInstantSettlementTransactionModel> createInstantSettlementTransactionModel = default(List<CreateInstantSettlementTransactionModel>));
        /// <summary>
        /// An endpoint for viewing the transactions for an Instant Settlement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">The number of the Instant Settlement product</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of List&lt;InstantSettlementTransactionModel&gt;</returns>
        System.Threading.Tasks.Task<List<InstantSettlementTransactionModel>> ApiInstantSettlementInstantSettlementNumberTransactionsGetAsync (int instantSettlementNumber, string apiVersion = default(string));

        /// <summary>
        /// An endpoint for viewing the transactions for an Instant Settlement
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">The number of the Instant Settlement product</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InstantSettlementTransactionModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InstantSettlementTransactionModel>>> ApiInstantSettlementInstantSettlementNumberTransactionsGetAsyncWithHttpInfo (int instantSettlementNumber, string apiVersion = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstantSettlementApi : IInstantSettlementApiSync, IInstantSettlementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstantSettlementApi : IInstantSettlementApi
    {
        private YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstantSettlementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstantSettlementApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstantSettlementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstantSettlementApi(String basePath)
        {
            this.Configuration = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.Configuration.MergeConfigurations(
                YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.GlobalConfiguration.Instance,
                new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstantSettlementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstantSettlementApi(YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.Configuration.MergeConfigurations(
                YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstantSettlementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InstantSettlementApi(YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ISynchronousClient client,YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.IAsynchronousClient asyncClient, YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// An endpoint for getting your associated Instant Settlements 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>List&lt;InstantSettlementView&gt;</returns>
        public List<InstantSettlementView> ApiInstantSettlementGet (string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiResponse<List<InstantSettlementView>> localVarResponse = ApiInstantSettlementGetWithHttpInfo(apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for getting your associated Instant Settlements 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InstantSettlementView&gt;</returns>
        public YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiResponse< List<InstantSettlementView> > ApiInstantSettlementGetWithHttpInfo (string apiVersion = default(string))
        {
            YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<InstantSettlementView> >("/api/InstantSettlement", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiInstantSettlementGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for getting your associated Instant Settlements 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of List&lt;InstantSettlementView&gt;</returns>
        public async System.Threading.Tasks.Task<List<InstantSettlementView>> ApiInstantSettlementGetAsync (string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiResponse<List<InstantSettlementView>> localVarResponse = await ApiInstantSettlementGetAsyncWithHttpInfo(apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for getting your associated Instant Settlements 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InstantSettlementView&gt;)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiResponse<List<InstantSettlementView>>> ApiInstantSettlementGetAsyncWithHttpInfo (string apiVersion = default(string))
        {

            YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InstantSettlementView>>("/api/InstantSettlement", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiInstantSettlementGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create instant settlement transactions for a specified instant settlement Sample request:                    POST /api/InstantSettlement/30000001      [{          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 10000,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      },      {          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 500,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      }]
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">Instant settlement number (an integer)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="createInstantSettlementTransactionModel"> (optional)</param>
        /// <returns></returns>
        public void ApiInstantSettlementInstantSettlementNumberPost (int instantSettlementNumber, string apiVersion = default(string), List<CreateInstantSettlementTransactionModel> createInstantSettlementTransactionModel = default(List<CreateInstantSettlementTransactionModel>))
        {
             ApiInstantSettlementInstantSettlementNumberPostWithHttpInfo(instantSettlementNumber, apiVersion, createInstantSettlementTransactionModel);
        }

        /// <summary>
        /// Create instant settlement transactions for a specified instant settlement Sample request:                    POST /api/InstantSettlement/30000001      [{          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 10000,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      },      {          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 500,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      }]
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">Instant settlement number (an integer)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="createInstantSettlementTransactionModel"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiResponse<Object> ApiInstantSettlementInstantSettlementNumberPostWithHttpInfo (int instantSettlementNumber, string apiVersion = default(string), List<CreateInstantSettlementTransactionModel> createInstantSettlementTransactionModel = default(List<CreateInstantSettlementTransactionModel>))
        {
            // verify the required parameter 'instantSettlementNumber' is set
            if (instantSettlementNumber == null)
                throw new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException(400, "Missing required parameter 'instantSettlementNumber' when calling InstantSettlementApi->ApiInstantSettlementInstantSettlementNumberPost");

            YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (instantSettlementNumber != null)
                localVarRequestOptions.PathParameters.Add("instantSettlementNumber", YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.ParameterToString(instantSettlementNumber)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = createInstantSettlementTransactionModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/InstantSettlement/{instantSettlementNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiInstantSettlementInstantSettlementNumberPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create instant settlement transactions for a specified instant settlement Sample request:                    POST /api/InstantSettlement/30000001      [{          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 10000,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      },      {          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 500,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      }]
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">Instant settlement number (an integer)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="createInstantSettlementTransactionModel"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiInstantSettlementInstantSettlementNumberPostAsync (int instantSettlementNumber, string apiVersion = default(string), List<CreateInstantSettlementTransactionModel> createInstantSettlementTransactionModel = default(List<CreateInstantSettlementTransactionModel>))
        {
             await ApiInstantSettlementInstantSettlementNumberPostAsyncWithHttpInfo(instantSettlementNumber, apiVersion, createInstantSettlementTransactionModel);

        }

        /// <summary>
        /// Create instant settlement transactions for a specified instant settlement Sample request:                    POST /api/InstantSettlement/30000001      [{          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 10000,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      },      {          \&quot;transactionReferences\&quot;: [          \&quot;ref\&quot;          ],          \&quot;currencyISOCode\&quot;: \&quot;GBP\&quot;,          \&quot;totalSettlementAmount\&quot;: 500,          \&quot;transactionDate\&quot; : \&quot;2020-02-16T18:25:43-05:00\&quot;      }]
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">Instant settlement number (an integer)</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <param name="createInstantSettlementTransactionModel"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiResponse<Object>> ApiInstantSettlementInstantSettlementNumberPostAsyncWithHttpInfo (int instantSettlementNumber, string apiVersion = default(string), List<CreateInstantSettlementTransactionModel> createInstantSettlementTransactionModel = default(List<CreateInstantSettlementTransactionModel>))
        {
            // verify the required parameter 'instantSettlementNumber' is set
            if (instantSettlementNumber == null)
                throw new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException(400, "Missing required parameter 'instantSettlementNumber' when calling InstantSettlementApi->ApiInstantSettlementInstantSettlementNumberPost");


            YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (instantSettlementNumber != null)
                localVarRequestOptions.PathParameters.Add("instantSettlementNumber", YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.ParameterToString(instantSettlementNumber)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter
            localVarRequestOptions.Data = createInstantSettlementTransactionModel;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/InstantSettlement/{instantSettlementNumber}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiInstantSettlementInstantSettlementNumberPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for viewing the transactions for an Instant Settlement 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">The number of the Instant Settlement product</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>List&lt;InstantSettlementTransactionModel&gt;</returns>
        public List<InstantSettlementTransactionModel> ApiInstantSettlementInstantSettlementNumberTransactionsGet (int instantSettlementNumber, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiResponse<List<InstantSettlementTransactionModel>> localVarResponse = ApiInstantSettlementInstantSettlementNumberTransactionsGetWithHttpInfo(instantSettlementNumber, apiVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// An endpoint for viewing the transactions for an Instant Settlement 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">The number of the Instant Settlement product</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>ApiResponse of List&lt;InstantSettlementTransactionModel&gt;</returns>
        public YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiResponse< List<InstantSettlementTransactionModel> > ApiInstantSettlementInstantSettlementNumberTransactionsGetWithHttpInfo (int instantSettlementNumber, string apiVersion = default(string))
        {
            // verify the required parameter 'instantSettlementNumber' is set
            if (instantSettlementNumber == null)
                throw new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException(400, "Missing required parameter 'instantSettlementNumber' when calling InstantSettlementApi->ApiInstantSettlementInstantSettlementNumberTransactionsGet");

            YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (instantSettlementNumber != null)
                localVarRequestOptions.PathParameters.Add("instantSettlementNumber", YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.ParameterToString(instantSettlementNumber)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< List<InstantSettlementTransactionModel> >("/api/InstantSettlement/{instantSettlementNumber}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiInstantSettlementInstantSettlementNumberTransactionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// An endpoint for viewing the transactions for an Instant Settlement 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">The number of the Instant Settlement product</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of List&lt;InstantSettlementTransactionModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<InstantSettlementTransactionModel>> ApiInstantSettlementInstantSettlementNumberTransactionsGetAsync (int instantSettlementNumber, string apiVersion = default(string))
        {
             YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiResponse<List<InstantSettlementTransactionModel>> localVarResponse = await ApiInstantSettlementInstantSettlementNumberTransactionsGetAsyncWithHttpInfo(instantSettlementNumber, apiVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// An endpoint for viewing the transactions for an Instant Settlement 
        /// </summary>
        /// <exception cref="YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instantSettlementNumber">The number of the Instant Settlement product</param>
        /// <param name="apiVersion"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InstantSettlementTransactionModel&gt;)</returns>
        public async System.Threading.Tasks.Task<YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiResponse<List<InstantSettlementTransactionModel>>> ApiInstantSettlementInstantSettlementNumberTransactionsGetAsyncWithHttpInfo (int instantSettlementNumber, string apiVersion = default(string))
        {
            // verify the required parameter 'instantSettlementNumber' is set
            if (instantSettlementNumber == null)
                throw new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ApiException(400, "Missing required parameter 'instantSettlementNumber' when calling InstantSettlementApi->ApiInstantSettlementInstantSettlementNumberTransactionsGet");


            YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions localVarRequestOptions = new YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (instantSettlementNumber != null)
                localVarRequestOptions.PathParameters.Add("instantSettlementNumber", YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.ParameterToString(instantSettlementNumber)); // path parameter
            if (apiVersion != null)
                localVarRequestOptions.HeaderParameters.Add("api-version", YL.Web.Api.ThirdParty.InstantSettlement.Client.Client.ClientUtils.ParameterToString(apiVersion)); // header parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<InstantSettlementTransactionModel>>("/api/InstantSettlement/{instantSettlementNumber}/transactions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiInstantSettlementInstantSettlementNumberTransactionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
